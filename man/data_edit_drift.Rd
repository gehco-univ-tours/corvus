% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_data.R
\name{data_edit_drift}
\alias{data_edit_drift}
\title{Get measurement data from database}
\usage{
data_edit_drift(timestamp, value_corr, drift_value)
}
\arguments{
\item{timestamp}{POSIXct: timestamp}

\item{value_corr}{numeric: corrected value}

\item{drift_value}{numeric: drift value}

\item{con}{PqConnection: database connection}

\item{sensor}{integer: sensor id
#' @param start_date POSIXct: start date in format 'YYYY-MM-DD'
#' @param end_date POSIXct: end date in format 'YYYY-MM-DD'
#'
#' @return data.frame
#' @export
#'
#' @importFrom DBI dbGetQuery dbDisconnect sqlInterpolate dbQuoteIdentifier SQL
#'
#' @examples
#' con <- db_con()
#' data_get_measurement(con, 2, "2019-01-05", "2021-12-26")
data_get_measurement <- function(con, sensor, start_date, end_date){
  sql <- "SELECT timestamp, value, value_corr FROM measurement WHERE timestamp >= ?start_date AND timestamp <= ?end_date
    AND sensor_id = ?sensor ORDER BY timestamp;"
  query <- sqlInterpolate(con, sql, start_date = start_date, end_date = end_date,
                          sensor = sensor)
  data <- dbGetQuery(con, query)
  dbDisconnect(con)
  return(data)
}
Create drift correction column to edit data frame.}
}
\value{
numeric
}
\description{
Get measurement data from database
}
\examples{
data <- data.frame(timestamp = as.POSIXct(c("2021-01-01 00:00", "2021-01-02 00:00",
                                            "2021-01-03 00:00"), format = "\%Y-\%m-\%d \%H:\%M"),
                  value_corr = c(1, 2, 3)) \%>\%
                  dplyr::mutate(edit = data_edit_drift(timestamp, value_corr, 5))
}
